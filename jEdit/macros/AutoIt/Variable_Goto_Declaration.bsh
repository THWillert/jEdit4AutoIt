/*
 * Variable_Goto_Declaration.bsh - V1.0
 * Copyright (C) 2008/20/06 Thorsten Willert
 * thorsten.willert@gmx.de
 * http://thorsten-willert.de
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
================================================================================
1) Function Parameter

2) Declarations:
^[ \t]*(global|local|dim){1,1}(.*)\$"+sVar+"(\[\$?\w+\])?

3) Constants:
^[ \t]*(global|local|dim){1,1}[ \t]+(const)(.*)\$"+sVar+"(\[\$?\w+\])?"

4) =:
^[ \t]*\$"+sVar+"(\[\$?\w+\])?[ \t]*[\+\-&]?
(.*)\$"+sVar+"(\[\$?\w+\])?[ \t]*[\+\-&]?=
================================================================================
*/
void main(View view)
{
	textArea.selectWord();
	String sVar = textArea.getSelectedText();
	int iPos = textArea.getCaretPosition();

//==============================================================================
	String[] sRegex = {"^[ \\t]*(global|local|dim){1,1}(.*)\\$"+sVar+"(\\[\\$?\\w+\\])?",
					"^[ \\t]*(global|local|dim){1,1}[ \\t]+(const)(.*)\\$"+sVar+"(\\[\\$?\\w+\\])?",
					"^[ \\t]*\\$"+sVar+"(\\[\\$?\\w+\\])?[ \\t]*[\\+\\-&]?=",
					"(.*)\\$"+sVar+"(\\[\\$?\\w+\\])?[ \\t]*[\\+\\-&]?="};

	if ( SearchFunc(sVar) ) return;

	for (int i=0; i<4; i++)
		if ( SearchInBuffer( sRegex[i] )) return;

	textArea.setCaretPosition(iPos);
	Macros.error(view,"Declaration for:\n"+sVar + "\nnot found!");
}
//==============================================================================
boolean SearchFunc(String sVar)
{
	boolean ret = false;

	oldset = SearchAndReplace.getSearchFileSet();

	SearchAndReplace.setRegexp(false);
	SearchAndReplace.setReverseSearch(true);
	SearchAndReplace.setIgnoreCase(true);
	SearchAndReplace.setAutoWrapAround(false);

	SearchAndReplace.setSearchString("func ");
	SearchAndReplace.setSearchFileSet(new CurrentBufferSet());

	if ( SearchAndReplace.find(view) )
	{
		textArea.selectLine();
		String sText = textArea.getSelectedText();
		if ( sText.indexOf(sVar) != -1 ) ret = true;
	}

	textArea.selectNone();
	textArea.goToStartOfLine(false);

	SearchAndReplace.setSearchFileSet(oldset);

	return ret;
}
//==============================================================================
boolean SearchInBuffer(String sRegex)
{
	boolean ret = false;

	oldset = SearchAndReplace.getSearchFileSet();

	SearchAndReplace.setRegexp(true);
	SearchAndReplace.setReverseSearch(false);
	SearchAndReplace.setIgnoreCase(true);
	SearchAndReplace.setAutoWrapAround(true);

	SearchAndReplace.setSearchString(sRegex);
	SearchAndReplace.setSearchFileSet(new CurrentBufferSet());

	if ( SearchAndReplace.find(view) ) ret = true;

	textArea.selectNone();
	textArea.goToStartOfLine(false);
	SearchAndReplace.setSearchFileSet(oldset);

	return ret;
}
//==============================================================================
if ( buffer.getMode().toString().equals("autoitscript") )
	main(view);
else
	Macros.error(view, "No AutoItScript-file in current buffer!");
